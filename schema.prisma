generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Gender {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(255)
  description String @db.VarChar(255)

  users User[] @relation("Gender")
}

model Pronoun {
  id              Int      @id @default(autoincrement())
  word            String   @db.VarChar(255)
  masterPronoun   Pronoun? @relation("MasterPronoun", fields: [masterPronounId], references: [id])
  masterPronounId Int?

  subPrononuns Pronoun[]     @relation("MasterPronoun")
  userPronouns UserPronoun[] @relation("PronounUser")
}

model Preference {
  id           Int    @id @default(autoincrement())
  title        String @db.VarChar(255)
  identifier   String @unique @db.VarChar(255)
  defaultValue BigInt

  preferences UserPreference[] @relation("UserPreference")

  @@index([identifier])
}

model ColourScheme {
  id               Int    @id @default(autoincrement())
  name             String @unique @db.VarChar(255)
  primaryColour    String @db.VarChar(255)
  secondaryColour  String @db.VarChar(255)
  accentColour     String @db.VarChar(255)
  errorColour      String @db.VarChar(255)
  neutralColour    String @db.VarChar(255)
  lightColour      String @db.VarChar(255)
  darkColour       String @db.VarChar(255)
  backgroundColour String @db.VarChar(255)
}

model User {
  id        String    @id @default(uuid()) @db.VarChar(255)
  nickname  String    @unique @db.VarChar(255)
  email     String?   @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  gender    Gender?   @relation("Gender", fields: [genderId], references: [id])
  genderId  Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  posts       Post[]           @relation("UserPost")
  preferences UserPreference[] @relation("UserPreference")
  pronouns    UserPronoun[]    @relation("PronounUser")

  @@index([nickname])
}

model Post {
  id        String    @id @default(uuid()) @db.VarChar(255)
  user      User      @relation("UserPost", fields: [userId], references: [id])
  userId    String    @db.VarChar(255)
  contents  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model UserPreference {
  preference   Preference @relation("UserPreference", fields: [preferenceId], references: [id])
  preferenceId Int
  user         User       @relation("UserPreference", fields: [userId], references: [id])
  userId       String     @db.VarChar(255)
  value        BigInt?

  @@id([preferenceId, userId])
}

model UserPronoun {
  id        Int     @default(autoincrement())
  user      User    @relation("PronounUser", fields: [userId], references: [id])
  userId    String  @db.VarChar(255)
  pronoun   Pronoun @relation("PronounUser", fields: [pronounId], references: [id])
  pronounId Int

  @@id([userId, pronounId])
}
